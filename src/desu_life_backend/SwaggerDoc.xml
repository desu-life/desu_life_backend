<?xml version="1.0"?>
<doc>
    <assembly>
        <name>desu_life_backend</name>
    </assembly>
    <members>
        <member name="T:desu.life.Controllers.ThirdPartyOAuth2Controller">
            <summary>
            第三方平台OAuth2相关接口，用于生成第三方平台跳转链接、根据回调code获取第三方平台用户信息
            </summary>
        </member>
        <member name="M:desu.life.Controllers.ThirdPartyOAuth2Controller.#ctor(desu.life.Services.User.IUserService,Microsoft.Extensions.Logging.ILogger{desu.life.Controllers.ThirdPartyOAuth2Controller},desu.life.API.OsuClientV2)">
            <summary>
            第三方平台OAuth2相关接口，用于生成第三方平台跳转链接、根据回调code获取第三方平台用户信息
            </summary>
        </member>
        <member name="M:desu.life.Controllers.ThirdPartyOAuth2Controller.RedirectOsuLogin">
            <summary>
            osu! OAuth2触发授权跳转接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:desu.life.Controllers.ThirdPartyOAuth2Controller.RedirectDiscordOAuth">
            <summary>
            Discord OAuth2触发授权跳转接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:desu.life.Controllers.ThirdPartyOAuth2Controller.LinkOsuAsync(System.String)">
            <summary>
            osu! OAuth2回调跳转后 自动登录/注册并绑定接口
            </summary>
            <param name="code">osu!跳转用户面板时URL携带的code</param>
            <returns>空返回体</returns>
        </member>
        <member name="M:desu.life.Controllers.ThirdPartyOAuth2Controller.LinkDiscordAsync(System.String)">
            <summary>
            Discord OAuth2回调跳转后 确认绑定用户接口
            </summary>
            <param name="code">Discord跳转用户面板时URL携带的code</param>
            <returns>空返回体</returns>
        </member>
        <member name="T:desu.life.Controllers.UserController">
            <summary>
            用户相关接口
            </summary>
        </member>
        <member name="M:desu.life.Controllers.UserController.#ctor(desu.life.Services.User.IUserService,desu.life.Settings.OsuSettings,desu.life.Settings.DiscordSettings)">
            <summary>
            用户相关接口
            </summary>
        </member>
        <member name="M:desu.life.Controllers.UserController.FillLoginInfo(desu.life.Requests.FillLoginInfoRequest)">
            <summary>
            用户补填邮箱、密码接口
            </summary>
            <param name="request">补填请求</param>
            <returns>空返回体</returns>
        </member>
        <member name="M:desu.life.Controllers.UserController.EmailConfirm(desu.life.Requests.EmailConfirmRequest)">
            <summary>
            邮箱验证接口
            </summary>
            <param name="request">验证请求</param>
            <returns>空返回体</returns>
        </member>
        <member name="M:desu.life.Controllers.UserController.Login(desu.life.Requests.LoginRequest)">
            <summary>
            邮箱、密码登录接口
            </summary>
            <param name="request">登录请求</param>
            <returns>Token信息</returns>
        </member>
        <member name="M:desu.life.Controllers.UserController.RefreshToken(desu.life.Requests.RefreshTokenRequest)">
            <summary>
            刷新Token接口
            </summary>
            <param name="request">刷新请求</param>
            <returns>Token信息</returns>
        </member>
        <member name="P:desu.life.Data.Models.RefreshToken.Used">
            <summary>
                是否使用，一个RefreshToken只能使用一次
            </summary>
        </member>
        <member name="P:desu.life.Data.Models.RefreshToken.Invalidated">
            <summary>
                是否失效。修改用户重要信息时可将此字段更新为true，使用户重新登录
            </summary>
        </member>
        <member name="T:desu.life.Error.ErrorCodes">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:desu.life.Error.ErrorCodes.User">
            <summary>
            用户操作相关错误码
            </summary>
        </member>
        <member name="T:desu.life.Migrations.init">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.init.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.init.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.init.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:desu.life.Migrations.addUserLink">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.addUserLink.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.addUserLink.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.addUserLink.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:desu.life.Migrations.addRedeemCode">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.addRedeemCode.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.addRedeemCode.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.addRedeemCode.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:desu.life.Migrations.fixRedeemCode">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.fixRedeemCode.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.fixRedeemCode.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:desu.life.Migrations.fixRedeemCode.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:desu.life.Requests.FillLoginInfoRequest">
            <summary>
            注册后补填信息请求
            </summary>
        </member>
        <member name="P:desu.life.Requests.FillLoginInfoRequest.Password">
            <summary>
            登录密码
            </summary>
        </member>
        <member name="P:desu.life.Requests.FillLoginInfoRequest.Email">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="T:desu.life.Requests.RefreshTokenRequest">
            <summary>
                RefreshToken 请求参数
            </summary>
        </member>
        <member name="T:desu.life.Responses.FailedResponse">
            <summary>
                登录、注册失败时返回错误信息
            </summary>
        </member>
        <member name="T:desu.life.Responses.TokenResponse">
            <summary>
                注册、登录成功后返回 token
            </summary>
        </member>
        <member name="P:desu.life.Responses.UnifiedResponse`1.Status">
            <summary>
            状态结果
            </summary>
        </member>
        <member name="P:desu.life.Responses.UnifiedResponse`1.Message">
            <summary>
            消息描述
            </summary>
        </member>
        <member name="P:desu.life.Responses.UnifiedResponse`1.Data">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="M:desu.life.Responses.UnifiedResponse`1.Ok(`0)">
            <summary>
            成功状态返回结果
            </summary>
            <param name="data">返回的数据</param>
            <returns></returns>
        </member>
        <member name="M:desu.life.Responses.UnifiedResponse`1.Fail(System.String)">
            <summary>
            业务失败状态返回结果
            </summary>
            <param name="message">错误编码</param>
            <returns></returns>
        </member>
        <member name="M:desu.life.Responses.UnifiedResponse`1.UnAuthorized">
            <summary>
            权限不足返回结果
            </summary>
            <param name="message">错误编码</param>
            <returns></returns>
        </member>
        <member name="M:desu.life.Responses.UnifiedResponse`1.UnAuthenticated">
            <summary>
            未认证返回结果
            </summary>
            <param name="message">错误编码</param>
            <returns></returns>
        </member>
        <member name="M:desu.life.Responses.UnifiedResponse`1.Err(System.String)">
            <summary>
            异常状态返回结果
            </summary>
            <param name="message">错误编码</param>
            <returns></returns>
        </member>
        <member name="M:desu.life.Responses.UnifiedResponse`1.Of(System.Int32,`0,System.String)">
            <summary>
            自由组装返回结果
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:desu.life.Responses.UnifiedResponse`1.op_Implicit(`0)~desu.life.Responses.UnifiedResponse{`0}" -->
        <member name="M:desu.life.WebApplicationAuthorizationExtensions.AddDefaultAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                初始化默认的Authorization
            </summary>
            <remarks>
                Role为用户组，Policy为具体的功能。<br />
                一般来说，Policy是否合法首先验证Role，其次验证对应User的Policy开关。<br />
                示例中使用Claim实现User具体Policy开关，或者也可使用其他方式。
            </remarks>
            <param name="services"></param>
            <example>
                示例Roles: NormalUser, CommunityAdmin, ServerAdmin, etc.<br />
                示例Policies: ManageUsers, ManageServers, ManageUserRoles, etc.
                <code>
                    options.AddPolicy("RequireManageUsersRole", policy => policy
                        .RequireRole("ServerAdmin")
                        .RequireAssertion(k => !k.User.HasClaim("RequireManageUsersRole")
                            // 基于Claim排除对应Policy，若Claim中存在对应Policy则该功能不可用
                            // 同时需要api进行管理Claim: _userManager.AddClaimsAsync()
                    );
                </code>
            </example>
        </member>
    </members>
</doc>
